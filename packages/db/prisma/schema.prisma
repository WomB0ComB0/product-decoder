generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                          = "prisma-zod-generator"
  output                            = "../src/generated/schemas"
  createInputTypes                  = true
  addInputTypeValidation            = false
  createOptionalDefaultValuesTypes  = true
  createRelationValuesTypes         = true
  createPartialTypes                = true
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id                      String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                    String?
  email                   String?                @unique
  emailVerified           Boolean?               @map("email_verified")
  emailVerificationToken  String?                @unique @map("email_verification_token")
  image                   String?
  password                String?
  role                    Role                   @default(MEMBER)
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmationId String?
  profile                 Profile?
  accounts                Account[]
  sessions                Session[]
  imageProcesses          ImageProcess[]
  userTopResults          UserTopResult[]
  userChoices             UserChoice[]
  twoFactorConfirmation   TwoFactorConfirmation?

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_tokens")
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId // This should be unique for a one-to-one
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_confirmations")
}

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @default(MEMBER)
  active    Boolean  @default(true)
  version   String?
  photoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  address   Address?

  @@map("profiles")
}

enum Role {
  GUEST
  MEMBER
}

model Address {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  profileId String   @unique @db.ObjectId
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  line1     String
  line2     String?
  city      String
  province  String
  country   String
  zip       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

// --- Product Categorization and User Management Data Model Extension ---

model ImageProcess {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  imageUrl    String
  processedAt DateTime    @default(now())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  topResults  TopResult[]

  @@map("image_processes")
}

model TopResult {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  imageProcessId String          @db.ObjectId
  resultData     String
  createdAt      DateTime        @default(now())
  imageProcess   ImageProcess    @relation(fields: [imageProcessId], references: [id], onDelete: Cascade)
  metadata       Metadata[]
  userTopResults UserTopResult[]
  userChoices    UserChoice[]

  @@map("top_results")
}

model Metadata {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  topResultId       String            @db.ObjectId
  data              String
  createdAt         DateTime          @default(now())
  topResult         TopResult         @relation(fields: [topResultId], references: [id], onDelete: Cascade)
  uuidRelations     UUIDRelation[]
  productCategories ProductCategory[]

  @@map("metadata")
}

model UUIDRelation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  metadataId String   @db.ObjectId
  foreignKey String
  createdAt  DateTime @default(now())
  metadata   Metadata @relation(fields: [metadataId], references: [id], onDelete: Cascade)

  @@map("uuid_relations")
}

model ProductCategory {
  id                     String                 @id @default(auto()) @map("_id") @db.ObjectId
  metadataId             String                 @db.ObjectId
  categoryType           String // primitive or non-primitive
  name                   String
  createdAt              DateTime               @default(now())
  metadata               Metadata               @relation(fields: [metadataId], references: [id], onDelete: Cascade)
  primitiveCategories    PrimitiveCategory[]
  nonPrimitiveCategories NonPrimitiveCategory[]
  foodPipelines          FoodPipeline[]
  clothesPipelines       ClothesPipeline[]
  drugsPipelines         DrugsPipeline[]
  technologyPipelines    TechnologyPipeline[]

  @@map("product_categories")
}

model PrimitiveCategory {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  productCategoryId String          @db.ObjectId
  name              String
  apiIntegrationId  String?         @unique @db.ObjectId
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id], onDelete: Cascade)
  apiIntegration    APIIntegration? @relation(fields: [apiIntegrationId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("primitive_categories")
}

model NonPrimitiveCategory {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  productCategoryId String          @db.ObjectId
  name              String
  apiIntegrationId  String?         @unique @db.ObjectId
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id], onDelete: Cascade)
  apiIntegration    APIIntegration? @relation(fields: [apiIntegrationId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("non_primitive_categories")
}

model FoodPipeline {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  productCategoryId     String                 @db.ObjectId
  apiIntegrationId      String?                @unique @db.ObjectId
  productCategory       ProductCategory        @relation(fields: [productCategoryId], references: [id], onDelete: Cascade)
  apiIntegration        APIIntegration?        @relation(fields: [apiIntegrationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  searchResults         SearchResult[]
  locationPricingLayers LocationPricingLayer[]
  locations             Location[]
  pricings              Pricing[]
  foodPipelineDetails   FoodPipelineDetails?

  @@map("food_pipelines")
}

model ClothesPipeline {
  id                     String                  @id @default(auto()) @map("_id") @db.ObjectId
  productCategoryId      String                  @db.ObjectId
  apiIntegrationId       String?                 @unique @db.ObjectId
  productCategory        ProductCategory         @relation(fields: [productCategoryId], references: [id], onDelete: Cascade)
  apiIntegration         APIIntegration?         @relation(fields: [apiIntegrationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  searchResults          SearchResult[]
  locationPricingLayers  LocationPricingLayer[]
  locations              Location[]
  pricings               Pricing[]
  clothesPipelineDetails ClothesPipelineDetails?

  @@map("clothes_pipelines")
}

model DrugsPipeline {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  productCategoryId     String                 @db.ObjectId
  apiIntegrationId      String?                @unique @db.ObjectId
  productCategory       ProductCategory        @relation(fields: [productCategoryId], references: [id], onDelete: Cascade)
  apiIntegration        APIIntegration?        @relation(fields: [apiIntegrationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  searchResults         SearchResult[]
  locationPricingLayers LocationPricingLayer[]
  locations             Location[]
  pricings              Pricing[]
  drugsPipelineDetails  DrugsPipelineDetails?

  @@map("drugs_pipelines")
}

model TechnologyPipeline {
  id                        String                     @id @default(auto()) @map("_id") @db.ObjectId
  productCategoryId         String                     @db.ObjectId
  apiIntegrationId          String?                    @unique @db.ObjectId
  productCategory           ProductCategory            @relation(fields: [productCategoryId], references: [id], onDelete: Cascade)
  apiIntegration            APIIntegration?            @relation(fields: [apiIntegrationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  searchResults             SearchResult[]
  locationPricingLayers     LocationPricingLayer[]
  locations                 Location[]
  pricings                  Pricing[]
  technologyPipelineDetails TechnologyPipelineDetails?

  @@map("technology_pipelines")
}

model LocationPricingLayer {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  pipelineType         String
  createdAt            DateTime            @default(now())
  foodPipelineId       String?             @db.ObjectId
  clothesPipelineId    String?             @db.ObjectId
  drugsPipelineId      String?             @db.ObjectId
  technologyPipelineId String?             @db.ObjectId
  FoodPipeline         FoodPipeline?       @relation(fields: [foodPipelineId], references: [id])
  ClothesPipeline      ClothesPipeline?    @relation(fields: [clothesPipelineId], references: [id])
  DrugsPipeline        DrugsPipeline?      @relation(fields: [drugsPipelineId], references: [id])
  TechnologyPipeline   TechnologyPipeline? @relation(fields: [technologyPipelineId], references: [id])

  @@map("location_pricing_layers")
}

model SearchResult {
  id                   String               @id @default(auto()) @map("_id") @db.ObjectId
  expandedData         String
  createdAt            DateTime             @default(now())
  foodPipelineId       String?              @db.ObjectId
  clothesPipelineId    String?              @db.ObjectId
  drugsPipelineId      String?              @db.ObjectId
  technologyPipelineId String?              @db.ObjectId
  expandedFKRelations  ExpandedFKRelation[]
  outputInfos          OutputInfo[]
  foodPipeline         FoodPipeline?        @relation(fields: [foodPipelineId], references: [id])
  clothesPipeline      ClothesPipeline?     @relation(fields: [clothesPipelineId], references: [id])
  drugsPipeline        DrugsPipeline?       @relation(fields: [drugsPipelineId], references: [id])
  technologyPipeline   TechnologyPipeline?  @relation(fields: [technologyPipelineId], references: [id])

  @@map("search_results")
}

model ExpandedFKRelation {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  searchResultId String       @db.ObjectId
  foreignKey     String
  createdAt      DateTime     @default(now())
  searchResult   SearchResult @relation(fields: [searchResultId], references: [id], onDelete: Cascade)

  @@map("expanded_fk_relations")
}

model OutputInfo {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  searchResultId String       @db.ObjectId
  info           String
  createdAt      DateTime     @default(now())
  searchResult   SearchResult @relation(fields: [searchResultId], references: [id], onDelete: Cascade)

  @@map("output_infos")
}

model UserChoice {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  topResultId String    @db.ObjectId
  selectedAt  DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  topResult   TopResult @relation(fields: [topResultId], references: [id], onDelete: Cascade)

  @@map("user_choices")
}

model APIIntegration {
  id                     String                @id @default(auto()) @map("_id") @db.ObjectId
  type                   String // Google Maps, YouTube, Custom Search, etc.
  details                String
  primitiveCategory      PrimitiveCategory?
  nonPrimitiveCategory   NonPrimitiveCategory?
  FoodPipeline           FoodPipeline?
  ClothesPipeline        ClothesPipeline?
  DrugsPipeline          DrugsPipeline?
  TechnologyPipeline     TechnologyPipeline?

  @@map("api_integrations")
}

model Location {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  nearestLocation      String
  createdAt            DateTime            @default(now())
  foodPipelineId       String?             @db.ObjectId
  clothesPipelineId    String?             @db.ObjectId
  drugsPipelineId      String?             @db.ObjectId
  technologyPipelineId String?             @db.ObjectId
  foodPipeline         FoodPipeline?       @relation(fields: [foodPipelineId], references: [id])
  clothesPipeline      ClothesPipeline?    @relation(fields: [clothesPipelineId], references: [id])
  drugsPipeline        DrugsPipeline?      @relation(fields: [drugsPipelineId], references: [id])
  technologyPipeline   TechnologyPipeline? @relation(fields: [technologyPipelineId], references: [id])

  @@map("locations")
}

model Pricing {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  priceChangeHistory   String
  createdAt            DateTime            @default(now())
  foodPipelineId       String?             @db.ObjectId
  clothesPipelineId    String?             @db.ObjectId
  drugsPipelineId      String?             @db.ObjectId
  technologyPipelineId String?             @db.ObjectId
  foodPipeline         FoodPipeline?       @relation(fields: [foodPipelineId], references: [id])
  clothesPipeline      ClothesPipeline?    @relation(fields: [clothesPipelineId], references: [id])
  drugsPipeline        DrugsPipeline?      @relation(fields: [drugsPipelineId], references: [id])
  technologyPipeline   TechnologyPipeline? @relation(fields: [technologyPipelineId], references: [id])

  @@map("pricings")
}

model UserTopResult {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  topResultId String    @db.ObjectId
  selectedAt  DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  topResult   TopResult @relation(fields: [topResultId], references: [id], onDelete: Cascade)

  @@map("user_top_results")
}

model FoodPipelineDetails {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  foodPipelineId     String       @unique @db.ObjectId
  nearestLocation    String
  nutrientInfo       String
  priceChangeHistory String
  foodPipeline       FoodPipeline @relation(fields: [foodPipelineId], references: [id], onDelete: Cascade)

  @@map("food_pipeline_details")
}

model ClothesPipelineDetails {
  id                 String          @id @default(auto()) @map("_id") @db.ObjectId
  clothesPipelineId  String          @unique @db.ObjectId
  nearestLocation    String
  productReviews     String
  priceChangeHistory String
  clothesPipeline    ClothesPipeline @relation(fields: [clothesPipelineId], references: [id], onDelete: Cascade)

  @@map("clothes_pipeline_details")
}

model DrugsPipelineDetails {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  drugsPipelineId    String        @unique @db.ObjectId
  nearestLocation    String
  priceChangeHistory String
  drugsPipeline      DrugsPipeline @relation(fields: [drugsPipelineId], references: [id], onDelete: Cascade)

  @@map("drugs_pipeline_details")
}

model TechnologyPipelineDetails {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  technologyPipelineId String             @unique @db.ObjectId
  designatedTask       String
  technologyPipeline   TechnologyPipeline @relation(fields: [technologyPipelineId], references: [id], onDelete: Cascade)

  @@map("technology_pipeline_details")
}
